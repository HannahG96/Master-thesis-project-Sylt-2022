for(u in 1:length(spp.names)){
data.PhytoMicro_annual[rows.mystation[i],(3+u)]<-mean(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)
data.PhytoMicro_annual[rows.mystation[i],(3+length(spp.names)+u)]<-max(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)[1]
data.PhytoMicro_annual[rows.mystation[i],(3+length(spp.names)+length(spp.names)+u)]<-min(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)[1]
}}
nrow.df<-length(mytimeseries)}
View(data.PhytoMicro_annual)
60/12
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD abundances
colnames.spp<-c(paste(spp.names,"_seasonal_AVG",sep=""),
paste(spp.names,"_seasonal_SD",sep=""),
paste(spp.names,"_seasonal_pctSD",sep=""))
timeseries.st
data.PhytoMicro_seasonal<-as.data.frame(matrix(NA,nrow=sum(timeseries.st)*4,ncol=(length(colnames.spp)+4),
dimnames=list(NULL,c("station","year","season","Nobs",colnames.spp))))
data.PhytoMicro_seasonal$season<-rep(c("winter","spring","summer","autumn"),sum(timeseries.st))
nrow.df<-0
for(f in 1:length(stations)){
data.mystation<-datall[which(datall[,"Event"]==stations[f]),]
mytimeseries<-unique(data.mystation[,"year"])
rows.mystation<-(nrow.df+1):(nrow.df+length(mytimeseries)*4)
data.PhytoMicro_seasonal[rows.mystation,"station"]<-stations[f]
yearly.rows<-vector(mode="numeric",length=length(mytimeseries))
nextyear<-rows.mystation[1]
for(p in 1:length(yearly.rows)){yearly.rows[p]<-nextyear;nextyear<-nextyear+4}
for(i in 1:length(mytimeseries)){
myyear.rows<-yearly.rows[i]:(yearly.rows[i]+3)
data.PhytoMicro_seasonal[myyear.rows,"year"]<-mytimeseries[i]
data.myyear<-datall[which(datall[,"year"]==mytimeseries[i]),]
for(z in 1:length(myyear.rows)){
data.myseason<-data.myyear[which(data.myyear[,"season"]==data.MERO_seasonal[myyear.rows[z],"season"]),]
data.PhytoMicro_seasonal[myyear.rows[z],"Nobs"]<-nrow(data.myseason)#number of sampling dates per year+season
for(u in 1:length(spp.names)){
data.PhytoMicro_seasonal[myyear.rows[z],(4+u)]<-tot<-mean(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.PhytoMicro_seasonal[myyear.rows[z],(4+length(spp.names)+u)]<-frac<-sd(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.PhytoMicro_seasonal[myyear.rows[z],(4+length(spp.names)+length(spp.names)+u)]<-frac*100/tot
}}}
nrow.df<-length(mytimeseries)*4}
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD abundances
colnames.spp<-c(paste(spp.names,"_seasonal_AVG",sep=""),
paste(spp.names,"_seasonal_SD",sep=""),
paste(spp.names,"_seasonal_pctSD",sep=""))
data.PhytoMicro_seasonal<-as.data.frame(matrix(NA,nrow=sum(timeseries.st)*4,ncol=(length(colnames.spp)+4),
dimnames=list(NULL,c("station","year","season","Nobs",colnames.spp))))
data.PhytoMicro_seasonal$season<-rep(c("winter","spring","summer","autumn"),sum(timeseries.st))
nrow.df<-0
for(f in 1:length(stations)){
data.mystation<-datall[which(datall[,"Event"]==stations[f]),]
mytimeseries<-unique(data.mystation[,"year"])
rows.mystation<-(nrow.df+1):(nrow.df+length(mytimeseries)*4)
data.PhytoMicro_seasonal[rows.mystation,"station"]<-stations[f]
yearly.rows<-vector(mode="numeric",length=length(mytimeseries))
nextyear<-rows.mystation[1]
for(p in 1:length(yearly.rows)){yearly.rows[p]<-nextyear;nextyear<-nextyear+4}
for(i in 1:length(mytimeseries)){
myyear.rows<-yearly.rows[i]:(yearly.rows[i]+3)
data.PhytoMicro_seasonal[myyear.rows,"year"]<-mytimeseries[i]
data.myyear<-datall[which(datall[,"year"]==mytimeseries[i]),]
for(z in 1:length(myyear.rows)){
data.myseason<-data.myyear[which(data.myyear[,"season"]==data.PhytoMicro_seasonal[myyear.rows[z],"season"]),]
data.PhytoMicro_seasonal[myyear.rows[z],"Nobs"]<-nrow(data.myseason)#number of sampling dates per year+season
for(u in 1:length(spp.names)){
data.PhytoMicro_seasonal[myyear.rows[z],(4+u)]<-tot<-mean(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.PhytoMicro_seasonal[myyear.rows[z],(4+length(spp.names)+u)]<-frac<-sd(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.PhytoMicro_seasonal[myyear.rows[z],(4+length(spp.names)+length(spp.names)+u)]<-frac*100/tot
}}}
nrow.df<-length(mytimeseries)*4}
View(data.PhytoMicro_seasonal)
#Merge info about annual and seasonal abundances
data.PhytoMicro<-merge(data.MERO_seasonal,data.MERO_annual,by=c("station","year"),all=TRUE)
#Merge info about annual and seasonal abundances
data.PhytoMicro<-merge(data.PhytoMicro_seasonal,data.PhytoMicro_annual,by=c("station","year"),all=TRUE)
#Reorder columns
flip<-which(colnames(data.MERO)=="Nobs.sum")
#Merge info about annual and seasonal abundances
data.PhytoMicro<-merge(data.PhytoMicro_seasonal,data.PhytoMicro_annual,by=c("station","year"),all=TRUE)
#Reorder columns
flip<-which(colnames(data.PhytoMicro)=="Nobs.sum")
data.PhytoMicro<-data.PhytoMicro[,c(1:3,flip,4:(flip-1),(flip+1):ncol(data.PhytoMicro))]
View(data.PhytoMicro)
228*4
228*6
length(spp.names)*6
224*6
###################################################
#ANALYSE & FORMAT MEROPLANKTON TIME SERIES OF SRB
###################################################
#-->sampled at List Ferry Terminal (2007-2021) & Station 1 (2014-2021)
#set working directory
setwd("C:/Hannah/Biological Oceanography/Master Thesis/Project/Data assembly/Langzeitdaten_J.Rick/Meroplankton")
#load packages
library(data.table)
library(doBy)
library(ggplot2)
library(writexl)
#import data
datall.colnames<-vector()#column names of all data files
#Ferry terminal:
datall_FT<-list()#list to store all imported data files
datall_FT.names<-vector()#vector to store data file names
timeseries<-c(2007:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Meroplankton_FT_",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "N/A", dec = "," , data.table = FALSE)
colnames(dat)[c(2:5)]<-c("Date","Latitude","Longitude","Water_Depth")#rename certain columns
dat<-dat[-1,-c(1,6)]#remove unnecessary rows+columns
dat$year<-timeseries[i]
dat$station<-"FT"
datall.colnames<-c(datall.colnames,colnames(dat))
datall_FT.names<-c(datall_FT.names,dataname)
datall_FT[[i]]<-dat}
names(datall_FT)<-datall_FT.names
#Station 1:
datall_ST1<-list()#list to store all imported data files
datall_ST1.names<-vector()#vector to store data file names
timeseries<-c(2014:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Meroplankton_ST1_",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "N/A", dec = "," , data.table = FALSE)
colnames(dat)[c(2:5)]<-c("Date","Latitude","Longitude","Water_Depth")#rename certain columns
dat<-dat[-1,-c(1,6)]#remove unnecessary rows+columns
dat$year<-timeseries[i]
dat$station<-"ST1"
datall.colnames<-c(datall.colnames,colnames(dat))
datall_ST1.names<-c(datall_ST1.names,dataname)
datall_ST1[[i]]<-dat}
names(datall_ST1)<-datall_ST1.names
#Merge all data files
datall.colnames<-unique(datall.colnames)#unique column names of all data files
colnames<-datall.colnames[c(30,31,1:29,34:37,38,32,33)]#reorder column names
datall<-as.data.frame(matrix(NA,nrow=10000,ncol=38,dimnames=list(NULL,colnames)))
nrow.df<-0
for(i in 1:length(datall_FT)){#add all data files from Ferry Terminal
mydata<-datall_FT[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
for(i in 1:length(datall_ST1)){#add all data files from station 1
mydata<-datall_ST1[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
datall<-datall[c(1:nrow.df),c(1:35)]#remove empty rows and columns
#rename spp columns for R
allspp<-strsplit(colnames(datall)[c(7:ncol(datall))],split=" ")
spp.names<-vector()
for(i in 1:length(allspp)){
myspp<-allspp[[i]]
if(length(myspp)>1){myname<-paste(myspp[1],myspp[2],sep="_")
}else{myname<-myspp}
spp.names<-c(spp.names,myname)}
colnames(datall)[7:ncol(datall)]<-spp.names
#Make date column understandable for R
datall$Date<- as.Date (datall$Date , format = "%d.%m.%Y")
#Format abundance columns into numeric
for(i in 7:35)datall[,i]<-as.numeric(datall[,i])
#Add month+season column
datall$season<-datall$month<-NA
for(i in 1:nrow(datall))datall[i,"month"]<-strsplit(as.character(datall[i,"Date"]),split="-")[[1]][2]
datall$month<-as.numeric(datall$month)
for(i in 3:5)datall[which(datall[,"month"]==i),"season"]<-"spring"#spring:March-May
for(i in 6:8)datall[which(datall[,"month"]==i),"season"]<-"summer"#summer:June-August
for(i in 9:11)datall[which(datall[,"month"]==i),"season"]<-"autumn"#autumn:September-November
for(i in c(12,1,2))datall[which(datall[,"month"]==i),"season"]<-"winter"#winter:December-February
##############
#Calculate annual (i)AVG, (ii)MAX & (iii)MIN abundances
stations<-unique(datall$station)
timeseries.st<-vector(mode="numeric",length(stations))#number of sampling years per station
for(i in 1:length(stations))timeseries.st[i]<-length(unique(datall[which(datall[,"station"]==stations[i]),"year"]))
colnames.spp<-c(paste(spp.names,"_annual_AVG",sep=""),
paste(spp.names,"_annual_MAX",sep=""),
paste(spp.names,"_annual_MIN",sep=""))
data.MERO_annual<-as.data.frame(matrix(NA,nrow=sum(timeseries.st),ncol=(length(colnames.spp)+3),
dimnames=list(NULL,c("station","year","Nobs.sum",colnames.spp))))
nrow.df<-0
for(f in 1:length(stations)){
data.mystation<-datall[which(datall[,"station"]==stations[f]),]
mytimeseries<-unique(data.mystation[,"year"])
rows.mystation<-(nrow.df+1):(nrow.df+length(mytimeseries))
data.MERO_annual[rows.mystation,"station"]<-stations[f]
for(i in 1:length(mytimeseries)){
data.MERO_annual[rows.mystation[i],"year"]<-mytimeseries[i]
data.myyear<-datall[which(datall[,"year"]==data.MERO_annual[rows.mystation[i],"year"]),]
data.MERO_annual[rows.mystation[i],"Nobs.sum"]<-nrow(data.myyear)#number of sampling dates per year
for(u in 1:length(spp.names)){
data.MERO_annual[rows.mystation[i],(3+u)]<-mean(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)
data.MERO_annual[rows.mystation[i],(3+length(spp.names)+u)]<-max(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)[1]
data.MERO_annual[rows.mystation[i],(3+length(spp.names)+length(spp.names)+u)]<-min(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)[1]
}}
nrow.df<-length(mytimeseries)}
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD abundances
colnames.spp<-c(paste(spp.names,"_seasonal_AVG",sep=""),
paste(spp.names,"_seasonal_SD",sep=""),
paste(spp.names,"_seasonal_pctSD",sep=""))
data.MERO_seasonal<-as.data.frame(matrix(NA,nrow=sum(timeseries.st)*4,ncol=(length(colnames.spp)+4),
dimnames=list(NULL,c("station","year","season","Nobs",colnames.spp))))
data.MERO_seasonal$season<-rep(c("winter","spring","summer","autumn"),sum(timeseries.st))
nrow.df<-0
for(f in 1:length(stations)){
data.mystation<-datall[which(datall[,"station"]==stations[f]),]
mytimeseries<-unique(data.mystation[,"year"])
rows.mystation<-(nrow.df+1):(nrow.df+length(mytimeseries)*4)
data.MERO_seasonal[rows.mystation,"station"]<-stations[f]
yearly.rows<-vector(mode="numeric",length=length(mytimeseries))
nextyear<-rows.mystation[1]
for(p in 1:length(yearly.rows)){yearly.rows[p]<-nextyear;nextyear<-nextyear+4}
for(i in 1:length(mytimeseries)){
myyear.rows<-yearly.rows[i]:(yearly.rows[i]+3)
data.MERO_seasonal[myyear.rows,"year"]<-mytimeseries[i]
data.myyear<-datall[which(datall[,"year"]==mytimeseries[i]),]
for(z in 1:length(myyear.rows)){
data.myseason<-data.myyear[which(data.myyear[,"season"]==data.MERO_seasonal[myyear.rows[z],"season"]),]
data.MERO_seasonal[myyear.rows[z],"Nobs"]<-nrow(data.myseason)#number of sampling dates per year+season
for(u in 1:length(spp.names)){
data.MERO_seasonal[myyear.rows[z],(4+u)]<-tot<-mean(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.MERO_seasonal[myyear.rows[z],(4+length(spp.names)+u)]<-frac<-sd(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.MERO_seasonal[myyear.rows[z],(4+length(spp.names)+length(spp.names)+u)]<-frac*100/tot
}}}
nrow.df<-length(mytimeseries)*4}
View(data.MERO_annual)
View(data.MERO_seasonal)
#Merge info about annual and seasonal abundances
data.MERO<-merge(data.MERO_seasonal,data.MERO_annual,by=c("station","year"),all=TRUE)
#######################################################
#ANALYSE & FORMAT PRIMARY PRODUCTION TIME SERIES OF SRB
#######################################################
#-->sampled at Königshafen
#set working directory
working_dir<-"C:/Hannah/Biological Oceanography/Master Thesis/Project/Data assembly/"
setwd(working_dir)
#load packages
library(ggplot2)
library(writexl)
#Import data (stored as tab files):
source("R functions/import_pangaea_file.R")#function to convert tab file into data frame
folder<-"PP_params_R.&H.Asmus/"
a<-rep("List_Koenigshafen_phytoplank_PP_",8)
timeseries<-c(2007:2014)
filenames<-vector()#Create vector of the filenames to be imported
for(i in 1:length(timeseries)){
myfilename<-paste(folder,a[i],timeseries[i],".tab",sep="")
filenames<-c(filenames,myfilename)}
datall.list<-list()#list to store all imported data files
datall.names<-vector()#vector to attribute a name to each data file
datall.colnames<-vector()#column names of all data files
stations<-rep("List Koenigshafen",8)
for(i in 1:length(filenames)){
mydata.name<-strsplit(filenames[i],split="/",fixed=TRUE)[[1]][2]
mydata.name<-strsplit(mydata.name,split=".",fixed=TRUE)[[1]][1]#Name of the data file
datall.names<-c(datall.names,mydata.name)
dat<-import_pangaea_file(myfile=filenames[i])
dat$year<-timeseries[i]#column that indicates sampling year of the data file
if(length(which(colnames(dat)=="Event"))==0)dat$Event<-stations[i]#if necessary, column that indicates sampling station of the data file
datall.colnames<-c(datall.colnames,colnames(dat))
datall.list[[i]]<-dat}
names(datall.list)<-datall.names
#Merge all data files
datall.colnames<-unique(datall.colnames)#unique column names of all data files
colnames<-datall.colnames[c(12,11,1:10)]#reorder column names
datall<-as.data.frame(matrix(NA,nrow=10000,ncol=length(colnames),dimnames=list(NULL,colnames)))
nrow.df<-0
for(i in 1:length(datall.list)){
mydata<-datall.list[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
datall<-datall[c(1:nrow.df),]#remove empty rows
#Make date column understandable for R
datall$Date_Time<- as.Date (datall$Date_Time , format = "%Y-%m-%d")
#Format PP parameter columns into numeric
for(i in 5:length(colnames))datall[,i]<-as.numeric(datall[,i])
####Note: in PPparams tab file 2012/13 --> missing values, NAs introduced
#Add month+season column
datall$season<-datall$month<-NA
for(i in 1:nrow(datall))datall[i,"month"]<-strsplit(as.character(datall[i,"Date_Time"]),split="-")[[1]][2]
datall$month<-as.numeric(datall$month)
for(i in 3:5)datall[which(datall[,"month"]==i),"season"]<-"spring"#spring:March-May
for(i in 6:8)datall[which(datall[,"month"]==i),"season"]<-"summer"#summer:June-August
for(i in 9:11)datall[which(datall[,"month"]==i),"season"]<-"autumn"#autumn:September-November
for(i in c(12,1,2))datall[which(datall[,"month"]==i),"season"]<-"winter"#winter:December-February
#Calculate annual (i)AVG, (ii)MAX & (iii)MIN abundances
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD abundances
#######################################################
#ANALYSE & FORMAT PRIMARY PRODUCTION TIME SERIES OF SRB
#######################################################
#-->sampled at Königshafen
#set working directory
working_dir<-"C:/Hannah/Biological Oceanography/Master Thesis/Project/Data assembly/"
setwd(working_dir)
#load packages
library(ggplot2)
library(writexl)
#Import data (stored as tab files):
source("R functions/import_pangaea_file.R")#function to convert tab file into data frame
folder<-"PP_params_R.&H.Asmus/"
a<-rep("List_Koenigshafen_phytoplank_PP_",8)
timeseries<-c(2007:2014)
filenames<-vector()#Create vector of the filenames to be imported
for(i in 1:length(timeseries)){
myfilename<-paste(folder,a[i],timeseries[i],".tab",sep="")
filenames<-c(filenames,myfilename)}
datall.list<-list()#list to store all imported data files
datall.names<-vector()#vector to attribute a name to each data file
datall.colnames<-vector()#column names of all data files
stations<-rep("List Koenigshafen",8)
for(i in 1:length(filenames)){
mydata.name<-strsplit(filenames[i],split="/",fixed=TRUE)[[1]][2]
mydata.name<-strsplit(mydata.name,split=".",fixed=TRUE)[[1]][1]#Name of the data file
datall.names<-c(datall.names,mydata.name)
dat<-import_pangaea_file(myfile=filenames[i])
dat$year<-timeseries[i]#column that indicates sampling year of the data file
if(length(which(colnames(dat)=="Event"))==0)dat$Event<-stations[i]#if necessary, column that indicates sampling station of the data file
datall.colnames<-c(datall.colnames,colnames(dat))
datall.list[[i]]<-dat}
names(datall.list)<-datall.names
#Merge all data files
datall.colnames<-unique(datall.colnames)#unique column names of all data files
colnames<-datall.colnames[c(12,11,1:10)]#reorder column names
datall<-as.data.frame(matrix(NA,nrow=10000,ncol=length(colnames),dimnames=list(NULL,colnames)))
nrow.df<-0
for(i in 1:length(datall.list)){
mydata<-datall.list[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
datall<-datall[c(1:nrow.df),]#remove empty rows
#Make date column understandable for R
datall$Date_Time<- as.Date (datall$Date_Time , format = "%Y-%m-%d")
#Format PP parameter columns into numeric
for(i in 5:length(colnames))datall[,i]<-as.numeric(datall[,i])
####Note: in PPparams tab file 2012/13 --> missing values, NAs introduced
#Add month+season column
datall$season<-datall$month<-NA
for(i in 1:nrow(datall))datall[i,"month"]<-strsplit(as.character(datall[i,"Date_Time"]),split="-")[[1]][2]
datall$month<-as.numeric(datall$month)
for(i in 3:5)datall[which(datall[,"month"]==i),"season"]<-"spring"#spring:March-May
for(i in 6:8)datall[which(datall[,"month"]==i),"season"]<-"summer"#summer:June-August
for(i in 9:11)datall[which(datall[,"month"]==i),"season"]<-"autumn"#autumn:September-November
for(i in c(12,1,2))datall[which(datall[,"month"]==i),"season"]<-"winter"#winter:December-February
#Calculate annual (i)AVG, (ii)MAX & (iii)MIN abundances
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD abundances
View(datall)
unique(datall$Depth_water)
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD parameter values
param.names<-colnames(datall)[5:12]
param.names
data.PPparams_annual<-as.data.frame(matrix(NA,nrow=length(unique(datall$year)),ncol=(length(param.names)*3+2),
dimnames=list(NULL,c("year","Nobs.sum",colnames.param))))
#Calculate annual (i)AVG, (ii)MAX & (iii)MIN parameter values
param.names<-colnames(datall)[5:12]
colnames.param<-c(paste(param.names,"_annual_AVG",sep=""),
paste(param.names,"_annual_MAX",sep=""),
paste(param.names,"_annual_MIN",sep=""))
data.PPparams_annual<-as.data.frame(matrix(NA,nrow=length(unique(datall$year)),ncol=(length(param.names)*3+2),
dimnames=list(NULL,c("year","Nobs.sum",colnames.param))))
for(i in 1:length(unique(datall$year))){
data.PPparams_annual[i,"year"]<-unique(datall[,"year"])[i]
data.myyear<-datall[which(datall[,"year"]==data.PPparams_annual[i,"year"]),]
data.PPparams_annual[i,"Nobs.sum"]<-nrow(data.myyear)#number of sampling dates per year
for(u in 1:length(param.names)){
data.PPparams_annual[i,(2+u)]<-mean(data.myyear[,which(colnames(data.myyear)==param.names[u])],na.rm=TRUE)
data.PPparams_annual[i,(2+length(param.names)+u)]<-max(data.myyear[,which(colnames(data.myyear)==param.names[u])],na.rm=TRUE)[1]
data.PPparams_annual[i,(2+length(param.names)+length(param.names)+u)]<-min(data.myyear[,which(colnames(data.myyear)==param.names[u])],na.rm=TRUE)[1]
}}
View(data.PPparams_annual)
20/12
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD parameter values
colnames.param<-c(paste(param.names,"_seasonal_AVG",sep=""),
paste(param.names,"_seasonal_SD",sep=""),
paste(param.names,"_seasonal_pctSD",sep=""))
data.PPparams_seasonal<-as.data.frame(matrix(NA,nrow=length(unique(datall$year))*4,ncol=(length(param.names)*3+3),
dimnames=list(NULL,c("year","season","Nobs",colnames.spp))))
data.PPparams_seasonal<-as.data.frame(matrix(NA,nrow=length(unique(datall$year))*4,ncol=(length(param.names)*3+3),
dimnames=list(NULL,c("year","season","Nobs",colnames.param))))
data.PPparams_seasonal$season<-rep(c("winter","spring","summer","autumn"),length(unique(datall$year)))
yearly.rows<-vector(mode="numeric",length=length(unique(datall$year)))
nextyear<-1
for(i in 1:length(yearly.rows)){yearly.rows[i]<-nextyear;nextyear<-nextyear+4}
for(i in 1:length(unique(datall$year))){
myyear.rows<-yearly.rows[i]:(yearly.rows[i]+3)
data.PPparams_seasonal[myyear.rows,"year"]<-unique(datall[,"year"])[i]
data.myyear<-datall[which(datall[,"year"]==unique(datall[,"year"])[i]),]
for(z in 1:length(myyear.rows)){
data.myseason<-data.myyear[which(data.myyear[,"season"]==data.PPparams_seasonal[myyear.rows[z],"season"]),]
data.PPparams_seasonal[myyear.rows[z],"Nobs"]<-nrow(data.myseason)#number of sampling dates per year+season
for(u in 1:length(param.names)){
data.PPparams_seasonal[myyear.rows[z],(3+u)]<-tot<-mean(data.myseason[,which(colnames(data.myseason)==param.names[u])],na.rm=TRUE)
data.PPparams_seasonal[myyear.rows[z],(3+length(param.names)+u)]<-frac<-sd(data.myseason[,which(colnames(data.myseason)==param.names[u])],na.rm=TRUE)
data.PPparams_seasonal[myyear.rows[z],(3+length(param.names)+length(param.names)+u)]<-frac*100/tot
}}}
View(data.PPparams_seasonal)
#Merge info about annual and seasonal parameter values
data.PPparams<-merge(data.PPparams_seasonal,data.PPparams_annual,by="year",all=TRUE)
#Reorder columns
flip<-which(colnames(data.PPparams)=="Nobs.sum")
data.PPparams<-data.PPparams[,c(1:3,flip,4:(flip-1),(flip+1):ncol(data.PPparams))]
###########################################################
#ANALYSE & FORMAT GELATINOUS ZOOPLANKTON TIME SERIES OF SRB
###########################################################
#-->sampled at List Reede (2009-2021)
#!!!!!add Nobs per year/season!!!!!
#set working directory
setwd("C:/Hannah/Biological Oceanography/Master Thesis/Project/Data assembly/Langzeitdaten_J.Rick/Gelatinous zooplankton")
#load packages
library(data.table)
library(doBy)
library(ggplot2)
library(writexl)
#import data
datall.colnames<-vector()#column names of all data files
datall.list<-list()#list to store all imported data files
datall.names<-vector()#vector to store data file names
timeseries<-c(2009:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Gelatinous_zoo_Reede",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "", dec = "," , data.table = FALSE)
if(i<9)colnames(dat)[c(2,3)]<-c("Date","Water_Depth")#rename certain columns
if(i>=9)colnames(dat)[c(2,5)]<-c("Date","Water_Depth")
dat<-dat[,-1]#remove unnecessary columns
dat$year<-timeseries[i]
dat$station<-"Reede"
datall.colnames<-c(datall.colnames,colnames(dat))
datall.names<-c(datall.names,dataname)
datall.list[[i]]<-dat}
names(datall.list)<-datall.names
#Merge all data files
datall.colnames<-unique(datall.colnames)#unique column names of all data files
colnames<-datall.colnames[c(21,28,29,20,1,2,22,36,3:19,25:27,30,31,23,24,32:35)]#reorder column names
datall<-as.data.frame(matrix(NA,nrow=10000,ncol=36,dimnames=list(NULL,colnames)))
nrow.df<-0
for(i in 1:length(datall.list)){
mydata<-datall.list[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
datall<-datall[c(1:nrow.df),c(1:30)]#remove empty rows and columns
#rename spp columns for R
allspp<-strsplit(colnames(datall)[c(9:30)],split=" ")
spp.names<-vector()
for(i in 1:length(allspp)){
myspp<-allspp[[i]]
myspp<-sub(",","_",myspp,fixed=TRUE)
myspp<-sub("sp.","_sp",myspp,fixed=TRUE)
myname<-paste(myspp[1],myspp[2],sep="")
spp.names<-c(spp.names,myname)}
colnames(datall)[9:30]<-spp.names
#Make date column understandable for R
datall$Date<- as.Date (datall$Date , format = "%d.%m.%Y")
#Add month+season column
datall$season<-datall$month<-NA
for(i in 1:nrow(datall))datall[i,"month"]<-strsplit(as.character(datall[i,"Date"]),split="-")[[1]][2]
datall$month<-as.numeric(datall$month)
for(i in 3:5)datall[which(datall[,"month"]==i),"season"]<-"spring"#spring:March-May
for(i in 6:8)datall[which(datall[,"month"]==i),"season"]<-"summer"#summer:June-August
for(i in 9:11)datall[which(datall[,"month"]==i),"season"]<-"autumn"#autumn:September-November
for(i in c(12,1,2))datall[which(datall[,"month"]==i),"season"]<-"winter"#winter:December-February
#Calculate annual (i)AVG, (ii)MAX & (iii)MIN abundances
colnames.spp<-c(paste(colnames(datall)[c(9:30)],"_annual_AVG",sep=""),
paste(colnames(datall)[c(9:30)],"_annual_MAX",sep=""),
paste(colnames(datall)[c(9:30)],"_annual_MIN",sep=""))
data.GelZOO_annual<-as.data.frame(matrix(NA,nrow=length(unique(datall$year)),ncol=68,
dimnames=list(NULL,c("year","Nobs.sum",colnames.spp))))
for(i in 1:length(unique(datall$year))){
data.GelZOO_annual[i,"year"]<-unique(datall[,"year"])[i]
data.myyear<-datall[which(datall[,"year"]==data.GelZOO_annual[i,"year"]),]
data.GelZOO_annual[i,"Nobs.sum"]<-nrow(data.myyear)#number of sampling dates per year
for(u in 1:length(spp.names)){
data.GelZOO_annual[i,(2+u)]<-mean(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)
data.GelZOO_annual[i,(2+length(spp.names)+u)]<-max(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)[1]
data.GelZOO_annual[i,(2+length(spp.names)+length(spp.names)+u)]<-min(data.myyear[,which(colnames(data.myyear)==spp.names[u])],na.rm=TRUE)[1]
}}
#Calculate seasonal (i)AVG, (ii)SD, (iii)%SD abundances
colnames.spp<-c(paste(colnames(datall)[c(9:30)],"_seasonal_AVG",sep=""),
paste(colnames(datall)[c(9:30)],"_seasonal_SD",sep=""),
paste(colnames(datall)[c(9:30)],"_seasonal_pctSD",sep=""))
data.GelZOO_seasonal<-as.data.frame(matrix(NA,nrow=length(unique(datall$year))*4,ncol=69,
dimnames=list(NULL,c("year","season","Nobs",colnames.spp))))
data.GelZOO_seasonal$season<-rep(c("winter","spring","summer","autumn"),length(unique(datall$year)))
yearly.rows<-vector(mode="numeric",length=length(unique(datall$year)))
nextyear<-1
for(i in 1:length(yearly.rows)){yearly.rows[i]<-nextyear;nextyear<-nextyear+4}
for(i in 1:length(unique(datall$year))){
myyear.rows<-yearly.rows[i]:(yearly.rows[i]+3)
data.GelZOO_seasonal[myyear.rows,"year"]<-unique(datall[,"year"])[i]
data.myyear<-datall[which(datall[,"year"]==unique(datall[,"year"])[i]),]
for(z in 1:length(myyear.rows)){
data.myseason<-data.myyear[which(data.myyear[,"season"]==data.GelZOO_seasonal[myyear.rows[z],"season"]),]
data.GelZOO_seasonal[myyear.rows[z],"Nobs"]<-nrow(data.myseason)#number of sampling dates per year+season
for(u in 1:length(spp.names)){
data.GelZOO_seasonal[myyear.rows[z],(3+u)]<-tot<-mean(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.GelZOO_seasonal[myyear.rows[z],(3+length(spp.names)+u)]<-frac<-sd(data.myseason[,which(colnames(data.myseason)==spp.names[u])],na.rm=TRUE)
data.GelZOO_seasonal[myyear.rows[z],(3+length(spp.names)+length(spp.names)+u)]<-frac*100/tot
}}}
#Merge info about annual and seasonal abundances
data.GelZOO<-merge(data.GelZOO_seasonal,data.GelZOO_annual,by="year",all=TRUE)
#Reorder columns
flip<-which(colnames(data.GelZOO)=="Nobs.sum")
data.GelZOO<-data.GelZOO[,c(1:3,flip,4:(flip-1),(flip+1):ncol(data.GelZOO))]
View(data.GelZOO)
25/12
37/12
40/12
spp.names
length(spp.names)
