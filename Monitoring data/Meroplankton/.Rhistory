for(i in 1:length(colnames.params))whichcols[i]<-which(colnames(dat)==colnames.params[i])
whichcols
apply(dat[,whichcols],2,FUN=mean,na.rm=TRUE)
unname(apply(dat[,whichcols],2,FUN=mean,na.rm=TRUE))
a<-dat[which(dat[,"station"]=="stations[p]"),]
unname(apply(a[,whichcols],2,FUN=mean,na.rm=TRUE))
a<-data.frame(a=c(1,1,1,1,))
a<-data.frame(a=c(1,1,1,1,1))
View(a)
apply(a,1,FUN=mean)
length(2:31)
###################################################
#ANALYSE & FORMAT MEROPLANKTON TIME SERIES OF SRB
###################################################
#-->sampled at List Ferry Terminal (2007-2021) & Station 1 (2014-2021)
#set working directory
setwd("C:/Hannah/Biological Oceanography/Master Thesis/Project/Data assembly/Langzeitdaten_J.Rick/Meroplankton")
#load packages
library(data.table)
library(doBy)
library(ggplot2)
library(writexl)
#import data
datall.colnames<-vector()#column names of all data files
#Ferry terminal:
datall_FT<-list()#list to store all imported data files
datall_FT.names<-vector()#vector to store data file names
timeseries<-c(2007:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Meroplankton_FT_",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "N/A", dec = "," , data.table = FALSE)
colnames(dat)[c(2:5)]<-c("Date","Latitude","Longitude","Water_Depth")#rename certain columns
dat<-dat[-1,-c(1,6)]#remove unnecessary rows+columns
dat$year<-timeseries[i]
dat$station<-"FT"
datall.colnames<-c(datall.colnames,colnames(dat))
datall_FT.names<-c(datall_FT.names,dataname)
datall_FT[[i]]<-dat}
names(datall_FT)<-datall_FT.names
#Station 1:
datall_ST1<-list()#list to store all imported data files
datall_ST1.names<-vector()#vector to store data file names
timeseries<-c(2014:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Meroplankton_ST1_",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "N/A", dec = "," , data.table = FALSE)
colnames(dat)[c(2:5)]<-c("Date","Latitude","Longitude","Water_Depth")#rename certain columns
dat<-dat[-1,-c(1,6)]#remove unnecessary rows+columns
dat$year<-timeseries[i]
dat$station<-"ST1"
datall.colnames<-c(datall.colnames,colnames(dat))
datall_ST1.names<-c(datall_ST1.names,dataname)
datall_ST1[[i]]<-dat}
names(datall_ST1)<-datall_ST1.names
#Merge all data files
datall.colnames<-unique(datall.colnames)#unique column names of all data files
colnames<-datall.colnames[c(30,31,1:29,34:37,38,32,33)]#reorder column names
datall<-as.data.frame(matrix(NA,nrow=10000,ncol=38,dimnames=list(NULL,colnames)))
nrow.df<-0
for(i in 1:length(datall_FT)){#add all data files from Ferry Terminal
mydata<-datall_FT[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
for(i in 1:length(datall_ST1)){#add all data files from station 1
mydata<-datall_ST1[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
datall<-datall[c(1:nrow.df),c(1:35)]#remove empty rows and columns
#rename spp columns for R
allspp<-strsplit(colnames(datall)[c(7:ncol(datall))],split=" ")
spp.names<-vector()
for(i in 1:length(allspp)){
myspp<-allspp[[i]]
if(length(myspp)>1){myname<-paste(myspp[1],myspp[2],sep="_")
}else{myname<-myspp}
spp.names<-c(spp.names,myname)}
colnames(datall)[7:ncol(datall)]<-spp.names
#Make date column understandable for R
datall$Date<- as.Date (datall$Date , format = "%d.%m.%Y")
#Format abundance columns into numeric
for(i in 7:35)datall[,i]<-as.numeric(datall[,i])
#FUNCTION PARAMETERS
dat<-datall#=data frame with data
timeseries<-2007:2021#=years of the timeseries
stations<-c("ST1","FT")#names of sampling stations
colnames.params<-spp.names#=column names of parameters
#1.Monthly AVG + SD of SRB
#=monthly AVG calculated based on means of each station
#=monthly SD calculated based on pooled data across stations
months<-1:12
Nobs_stations<-paste("Nobs",stations,sep="_")
colnames.df_month<-c(paste(colnames.params,"monthly_AVG",sep="_"),
paste(colnames.params,"monthly_SD",sep="_"))
data.param_month<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_month)),nrow=(length(months)*length(timeseries)),
dimnames=list(NULL,c("year","month",Nobs_stations,colnames.df_month))))
whichcols<-vector(mode="numeric",length=length(colnames.params))
for(i in 1:length(colnames.params))whichcols[i]<-which(colnames(dat)==colnames.params[i])
col.start<-length(c("year","month",Nobs_stations))+1
col.start
nrow.df<-0
for(i in 1:length(timeseries)){
for(u in 1:length(months)){
nrow.df<-nrow.df+1
data.param_month[nrow.df,"year"]<-timeseries[i]
data.param_month[nrow.df,"month"]<-months[u]
mydat<-dat[which(dat[,"year"]==timeseries[i]),]
mydat<-mydat[which(mydat[,"month"]==months[u]),]
monthly.mean<-as.data.frame(matrix(NA,nrow=length(colnames.params),ncol=length(stations),dimnames=list(NULL,NULL)))
for(p in 1:length(stations)){
if(length(stations)>1){
mydat2<-mydat[which(mydat[,"station"]==stations[p]),]
}else{mydat2<-mydat}
data.param_month[nrow.df, Nobs_stations[p]]<-nrow(mydat2)
monthly.mean[,p]<-unname(apply(mydat2[,whichcols],2,FUN=mean,na.rm=TRUE))}#monthly AVG per station
data.param_month[nrow.df,col.start:(colstart+length(colnames.params)-1)]<-
unname(apply(monthly.mean,1,FUN=mean,na.rm=TRUE))#monthly AVG across stations
data.param_month[nrow.df,(col.start+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols],2,FUN=sd,na.rm=TRUE))}}#monthly SD of pooled data
View(datall)
###################################################
#ANALYSE & FORMAT MEROPLANKTON TIME SERIES OF SRB
###################################################
#-->sampled at List Ferry Terminal (2007-2021) & Station 1 (2014-2021)
#set working directory
setwd("C:/Hannah/Biological Oceanography/Master Thesis/Project/Data assembly/Langzeitdaten_J.Rick/Meroplankton")
#load packages
library(data.table)
library(doBy)
library(ggplot2)
library(writexl)
#import data
datall.colnames<-vector()#column names of all data files
#Ferry terminal:
datall_FT<-list()#list to store all imported data files
datall_FT.names<-vector()#vector to store data file names
timeseries<-c(2007:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Meroplankton_FT_",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "N/A", dec = "," , data.table = FALSE)
colnames(dat)[c(2:5)]<-c("Date","Latitude","Longitude","Water_Depth")#rename certain columns
dat<-dat[-1,-c(1,6)]#remove unnecessary rows+columns
dat$year<-timeseries[i]
dat$station<-"FT"
datall.colnames<-c(datall.colnames,colnames(dat))
datall_FT.names<-c(datall_FT.names,dataname)
datall_FT[[i]]<-dat}
names(datall_FT)<-datall_FT.names
#Station 1:
datall_ST1<-list()#list to store all imported data files
datall_ST1.names<-vector()#vector to store data file names
timeseries<-c(2014:2021)
for(i in 1:length(timeseries)){
dataname<-paste("Meroplankton_ST1_",timeseries[i],sep="")
filename<-paste(dataname,".csv",sep="")
dat<-fread(file = filename, na.strings = "N/A", dec = "," , data.table = FALSE)
colnames(dat)[c(2:5)]<-c("Date","Latitude","Longitude","Water_Depth")#rename certain columns
dat<-dat[-1,-c(1,6)]#remove unnecessary rows+columns
dat$year<-timeseries[i]
dat$station<-"ST1"
datall.colnames<-c(datall.colnames,colnames(dat))
datall_ST1.names<-c(datall_ST1.names,dataname)
datall_ST1[[i]]<-dat}
names(datall_ST1)<-datall_ST1.names
#Merge all data files
datall.colnames<-unique(datall.colnames)#unique column names of all data files
colnames<-datall.colnames[c(30,31,1:29,34:37,38,32,33)]#reorder column names
datall<-as.data.frame(matrix(NA,nrow=10000,ncol=38,dimnames=list(NULL,colnames)))
nrow.df<-0
for(i in 1:length(datall_FT)){#add all data files from Ferry Terminal
mydata<-datall_FT[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
for(i in 1:length(datall_ST1)){#add all data files from station 1
mydata<-datall_ST1[[i]]
for(u in 1:length(colnames)){
if(length(which(colnames(mydata)==colnames[u]))>0){
datall[c((nrow.df+1):(nrow.df+nrow(mydata))),colnames[u]]<-mydata[,colnames[u]]}}
nrow.df<-nrow.df+nrow(mydata)}
datall<-datall[c(1:nrow.df),c(1:35)]#remove empty rows and columns
#rename spp columns for R
allspp<-strsplit(colnames(datall)[c(7:ncol(datall))],split=" ")
spp.names<-vector()
for(i in 1:length(allspp)){
myspp<-allspp[[i]]
if(length(myspp)>1){myname<-paste(myspp[1],myspp[2],sep="_")
}else{myname<-myspp}
spp.names<-c(spp.names,myname)}
colnames(datall)[7:ncol(datall)]<-spp.names
#Make date column understandable for R
datall$Date<- as.Date (datall$Date , format = "%d.%m.%Y")
#Format abundance columns into numeric
for(i in 7:35)datall[,i]<-as.numeric(datall[,i])
#Add month column
datall$month<-NA
for(i in 1:nrow(datall))datall[i,"month"]<-strsplit(as.character(datall[i,"Date"]),split="-")[[1]][2]
View(datall)
#Add month column
datall$month<-NA
for(i in 1:nrow(datall))datall[i,"month"]<-strsplit(as.character(datall[i,"Date"]),split="-")[[1]][2]
#Format abundance columns into numeric
for(i in 7:ncol(datall))datall[,i]<-as.numeric(datall[,i])
#FUNCTION PARAMETERS
dat<-datall#=data frame with data
timeseries<-2007:2021#=years of the timeseries
stations<-c("ST1","FT")#names of sampling stations
colnames.params<-spp.names#=column names of parameters
#1.Monthly AVG + SD of SRB
#=monthly AVG calculated based on means of each station
#=monthly SD calculated based on pooled data across stations
months<-1:12
Nobs_stations<-paste("Nobs",stations,sep="_")
colnames.df_month<-c(paste(colnames.params,"monthly_AVG",sep="_"),
paste(colnames.params,"monthly_SD",sep="_"))
data.param_month<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_month)),nrow=(length(months)*length(timeseries)),
dimnames=list(NULL,c("year","month",Nobs_stations,colnames.df_month))))
whichcols<-vector(mode="numeric",length=length(colnames.params))
for(i in 1:length(colnames.params))whichcols[i]<-which(colnames(dat)==colnames.params[i])
col.start<-length(c("year","month",Nobs_stations))+1
nrow.df<-0
for(i in 1:length(timeseries)){
for(u in 1:length(months)){
nrow.df<-nrow.df+1
data.param_month[nrow.df,"year"]<-timeseries[i]
data.param_month[nrow.df,"month"]<-months[u]
mydat<-dat[which(dat[,"year"]==timeseries[i]),]
mydat<-mydat[which(mydat[,"month"]==months[u]),]
monthly.mean<-as.data.frame(matrix(NA,nrow=length(colnames.params),ncol=length(stations),dimnames=list(NULL,NULL)))
for(p in 1:length(stations)){
if(length(stations)>1){
mydat2<-mydat[which(mydat[,"station"]==stations[p]),]
}else{mydat2<-mydat}
data.param_month[nrow.df, Nobs_stations[p]]<-nrow(mydat2)
monthly.mean[,p]<-unname(apply(mydat2[,whichcols],2,FUN=mean,na.rm=TRUE))}#monthly AVG per station
data.param_month[nrow.df,col.start:(colstart+length(colnames.params)-1)]<-
unname(apply(monthly.mean,1,FUN=mean,na.rm=TRUE))#monthly AVG across stations
data.param_month[nrow.df,(col.start+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols],2,FUN=sd,na.rm=TRUE))}}#monthly SD of pooled data
colstart<-length(c("year","month",Nobs_stations))+1
#1.Monthly AVG + SD of SRB
#=monthly AVG calculated based on means of each station
#=monthly SD calculated based on pooled data across stations
months<-1:12
Nobs_stations<-paste("Nobs",stations,sep="_")
colnames.df_month<-c(paste(colnames.params,"monthly_AVG",sep="_"),
paste(colnames.params,"monthly_SD",sep="_"))
data.param_month<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_month)),nrow=(length(months)*length(timeseries)),
dimnames=list(NULL,c("year","month",Nobs_stations,colnames.df_month))))
whichcols<-vector(mode="numeric",length=length(colnames.params))
for(i in 1:length(colnames.params))whichcols[i]<-which(colnames(dat)==colnames.params[i])
colstart<-length(c("year","month",Nobs_stations))+1
nrow.df<-0
for(i in 1:length(timeseries)){
for(u in 1:length(months)){
nrow.df<-nrow.df+1
data.param_month[nrow.df,"year"]<-timeseries[i]
data.param_month[nrow.df,"month"]<-months[u]
mydat<-dat[which(dat[,"year"]==timeseries[i]),]
mydat<-mydat[which(mydat[,"month"]==months[u]),]
monthly.mean<-as.data.frame(matrix(NA,nrow=length(colnames.params),ncol=length(stations),dimnames=list(NULL,NULL)))
for(p in 1:length(stations)){
if(length(stations)>1){
mydat2<-mydat[which(mydat[,"station"]==stations[p]),]
}else{mydat2<-mydat}
data.param_month[nrow.df, Nobs_stations[p]]<-nrow(mydat2)
monthly.mean[,p]<-unname(apply(mydat2[,whichcols],2,FUN=mean,na.rm=TRUE))}#monthly AVG per station
data.param_month[nrow.df,colstart:(colstart+length(colnames.params)-1)]<-
unname(apply(monthly.mean,1,FUN=mean,na.rm=TRUE))#monthly AVG across stations
data.param_month[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols],2,FUN=sd,na.rm=TRUE))}}#monthly SD of pooled data
View(data.param_month)
View(monthly.mean)
i
View(datall)
u
(colstart+length(colnames.params)-1)
colstart
(colstart+length(colnames.params))
(colstart+2*length(colnames.params)-1)
length(34:62)
spring<-3:5 #March-May
summer<-6:8 #June-August
autumn<-9:11 #September-November
winter<-c(12,1,2)#December(previous year)-February
data.param_month$season<-dat$season<-NA#add season column
for(i in 1:3){
data.param_month[which(data.param_month[,"month"]==spring[i]),"season"]<-"spring"
data.param_month[which(data.param_month[,"month"]==summer[i]),"season"]<-"summer"
data.param_month[which(data.param_month[,"month"]==autumn[i]),"season"]<-"autumn"
data.param_month[which(data.param_month[,"month"]==winter[i]),"season"]<-"winter"
dat[which(dat[,"month"]==spring[i]),"season"]<-"spring"
dat[which(dat[,"month"]==summer[i]),"season"]<-"summer"
dat[which(dat[,"month"]==autumn[i]),"season"]<-"autumn"
dat[which(dat[,"month"]==winter[i]),"season"]<-"winter"}
data.param_month$yearS<-data.param_month$year#add a special year column that includes december of PREVIOUS year
dat$yearS<-dat$year
for(i in 1:2){
data.param_month[which(data.param_month[,"month"]==i),"yearS"]<-data.param_month[which(data.param_month[,"month"]==i),"year"]-1
dat[which(dat[,"month"]==i),"yearS"]<-dat[which(dat[,"month"]==i),"year"]-1}
View(dat)
View(data.param_month)
colnames.df_season<-c(paste(colnames.params,"seasonal_AVG",sep="_"),
paste(colnames.params,"seasonal_SD",sep="_"),
paste(colnames.params,"seasonal_pctSD",sep="_"))
4+3*29
data.param_season<-as.data.frame(matrix(NA,ncol=(4+length(Nobs_stations)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
data.param_season<-as.data.frame(matrix(NA,ncol=(4+length(Nobs_stations)+length(colnames.df)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
data.param_season<-as.data.frame(matrix(NA,ncol=(4+length(Nobs_stations)+length(colnames.df_season)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
data.param_season<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_season)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
season<-c("spring","summer","autumn","winter")
data.param_season$season<-c(rep(season, (length(timeseries)-1)),season[1:3])
View(data.param_season)
whichcols.monthly_AVG<-vector(mode="numeric",length=length(colnames.params))
colnames.params.monthly_AVG<-paste(colnames.params,"monthly_AVG",sep="_")
colnames.params.monthly_AVG
a<-datall[1,4:10]
View(a)
a<-as.vector(a)
a
a<-as.vector(datall[1,4:10])
a<-unname(datall[1,4:10])
a
View(a)
class(a)
unname(datall[1,4:10])
as.character(unname(datall[1,4:10]))
a<-as.character(unname(datall[1,4:10]))
colnames.df_season
data.param_season<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_season)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
season<-c("spring","summer","autumn","winter")
data.param_season$season<-c(rep(season, (length(timeseries)-1)),season[1:3])
whichcols.monthly_AVG<-vector(mode="numeric",length=length(colnames.params))
colnames.params.monthly_AVG<-paste(colnames.params,"monthly_AVG",sep="_")
for(i in 1:length(colnames.params))whichcols.monthly_AVG[i]<-which(colnames(data.param_month)==colnames.params.monthly_AVG[i])
whichcols.monthly_AVG
colstart<-length(c("year","season",Nobs_stations))+1
View(data.param_season)
colstart
nrow.df<-0
for(i in 1:length(timeseries)){
if(i<length(timeseries)){
x<-3
}else{ #if(i==length(timeseries)){
x<-2
season<-c("spring","summer","autumn")}
for(u in 1:length(season)){
nrow.df<-nrow.df+1
data.param_season[nrow.df,"year"]<-timeseries[i]
mydat<-data.param_month[which(data.param_month[,"yearS"]==timeseries[i]),]
mydat<-mydat[which(mydat[,"season"]==season[u]),]
for(p in 1:length(stations)){
data.param_season[nrow.df,Nobs_stations[p]]<-sum(mydat[,Nobs_stations[p]])}
data.param_season[nrow.df,colstart:(colstart+length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols.monthly_AVG],2,FUN=mean,na.rm=TRUE))#seasonal AVG calculated based on monthly AVG
mydat2<-dat[which(dat[,"yearS"]==timeseries[i]),]
mydat2<-mydat2[which(mydat2[,"season"]==season[u]),]
data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat2[,whicols],2,FUN=sd,na.rm=TRUE))
data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+3*length(colnames.params)-1)]<-
as.numeric(data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)])*100/as.numeric(data.param_season[nrow.df,colstart:(colstart+length(colnames.params)-1)])
}}
data.param_season<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_season)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
season<-c("spring","summer","autumn","winter")
data.param_season$season<-c(rep(season, (length(timeseries)-1)),season[1:3])
whichcols.monthly_AVG<-vector(mode="numeric",length=length(colnames.params))
colnames.params.monthly_AVG<-paste(colnames.params,"monthly_AVG",sep="_")
for(i in 1:length(colnames.params))whichcols.monthly_AVG[i]<-which(colnames(data.param_month)==colnames.params.monthly_AVG[i])
colstart<-length(c("year","season",Nobs_stations))+1
nrow.df<-0
for(i in 1:length(timeseries)){
if(i<length(timeseries)){
x<-3
}else{ #if(i==length(timeseries)){
x<-2
season<-c("spring","summer","autumn")}
for(u in 1:length(season)){
nrow.df<-nrow.df+1
data.param_season[nrow.df,"year"]<-timeseries[i]
mydat<-data.param_month[which(data.param_month[,"yearS"]==timeseries[i]),]
mydat<-mydat[which(mydat[,"season"]==season[u]),]
for(p in 1:length(stations)){
data.param_season[nrow.df,Nobs_stations[p]]<-sum(mydat[,Nobs_stations[p]])}
data.param_season[nrow.df,colstart:(colstart+length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols.monthly_AVG],2,FUN=mean,na.rm=TRUE))#seasonal AVG calculated based on monthly AVG
mydat2<-dat[which(dat[,"yearS"]==timeseries[i]),]
mydat2<-mydat2[which(mydat2[,"season"]==season[u]),]
data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat2[,whichcols],2,FUN=sd,na.rm=TRUE))
data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+3*length(colnames.params)-1)]<-
as.numeric(data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)])*100/as.numeric(data.param_season[nrow.df,colstart:(colstart+length(colnames.params)-1)])
}}
(colstart+length(colnames.params))
(colstart+2*length(colnames.params)-1)])
(colstart+2*length(colnames.params)-1)
(colstart+length(colnames.params)-1)
colstart
(colstart+length(colnames.params))
(colstart+2*length(colnames.params))
(colstart+3*length(colnames.params)-1)
data.param_season<-as.data.frame(matrix(NA,ncol=(2+length(Nobs_stations)+length(colnames.df_season)),nrow=((length(timeseries)-1)*4+3),
dimnames=list(NULL,c("year","season",Nobs_stations,colnames.df_season))))
season<-c("spring","summer","autumn","winter")
data.param_season$season<-c(rep(season, (length(timeseries)-1)),season[1:3])
whichcols.monthly_AVG<-vector(mode="numeric",length=length(colnames.params))
colnames.params.monthly_AVG<-paste(colnames.params,"monthly_AVG",sep="_")
for(i in 1:length(colnames.params))whichcols.monthly_AVG[i]<-which(colnames(data.param_month)==colnames.params.monthly_AVG[i])
colstart<-length(c("year","season",Nobs_stations))+1
nrow.df<-0
for(i in 1:length(timeseries)){
if(i<length(timeseries)){
x<-3
}else{ #if(i==length(timeseries)){
x<-2
season<-c("spring","summer","autumn")}
for(u in 1:length(season)){
nrow.df<-nrow.df+1
data.param_season[nrow.df,"year"]<-timeseries[i]
mydat<-data.param_month[which(data.param_month[,"yearS"]==timeseries[i]),]
mydat<-mydat[which(mydat[,"season"]==season[u]),]
for(p in 1:length(stations)){
data.param_season[nrow.df,Nobs_stations[p]]<-sum(mydat[,Nobs_stations[p]])}
data.param_season[nrow.df,colstart:(colstart+length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols.monthly_AVG],2,FUN=mean,na.rm=TRUE))#seasonal AVG calculated based on monthly AVG
mydat2<-dat[which(dat[,"yearS"]==timeseries[i]),]
mydat2<-mydat2[which(mydat2[,"season"]==season[u]),]
data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat2[,whichcols],2,FUN=sd,na.rm=TRUE))
data.param_season[nrow.df,(colstart+2*length(colnames.params)):(colstart+3*length(colnames.params)-1)]<-
as.numeric(data.param_season[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)])*100/as.numeric(data.param_season[nrow.df,colstart:(colstart+length(colnames.params)-1)])
}}
#3.Annual AVG + MIN + MAX of SRB
#--> annual AVG calculated based monthly AVG
#-->annual MIN/MAX calculated based on pooled data
Nobs.sum_stations<-paste("Nobs.sum",stations,sep="_")
Nobs.sum_stations
colnames.df_season<-c(paste(colnames.params,"annual_AVG",sep="_"),
paste(colnames.params,"annual_MAX",sep="_"),
paste(colnames.params,"annual_MIN",sep="_"))
data.param_annual<-as.data.frame(matrix(NA,ncol=(1+length(Nobs.sum_stations)+length(colnames.df_season)),nrow=length(timeseries),
dimnames=list(NULL,c("year",Nobs.sum_stations,colnames.df_season))))
#3.Annual AVG + MIN + MAX of SRB
#--> annual AVG calculated based monthly AVG
#-->annual MIN/MAX calculated based on pooled data
Nobs.sum_stations<-paste("Nobs.sum",stations,sep="_")
colnames.df_annual<-c(paste(colnames.params,"annual_AVG",sep="_"),
paste(colnames.params,"annual_MAX",sep="_"),
paste(colnames.params,"annual_MIN",sep="_"))
data.param_annual<-as.data.frame(matrix(NA,ncol=(1+length(Nobs.sum_stations)+length(colnames.df_annual)),nrow=length(timeseries),
dimnames=list(NULL,c("year",Nobs.sum_stations,colnames.df_annual))))
colstart<-length(c("year",Nobs.sum_stations))+1
colstart
View(data.param_annual)
nrow.df<-0
for(i in 1:length(timeseries)){
nrow.df<-nrow.df+1
data.param_annual[nrow.df,"year"]<-timeseries[i]
mydat<-data.param_month[which(data.param_month[,"year"]==timeseries[i]),]
data.param_annual[nrow.df,colstart:(colstart+length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols.monthly_AVG],2,FUN=mean,na.rm=TRUE))#annual AVG
for(u in 1:length(stations))data.param_annual[nrow.df,Nobs.sum_stations[u]]<-sum(mydat[,Nobs_stations[u]])
mydat2<-dat[which(dat[,"year"]==timeseries[i]),]
data.param_annual[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat2[,whichcols],2,FUN=max,na.rm=TRUE))#annual MAX
data.param_season[nrow.df,(colstart+2*length(colnames.params)):(colstart+3*length(colnames.params)-1)]<-
unname(apply(mydat2[,whichcols],2,FUN=min,na.rm=TRUE))}#annual MIN
warnings()
(colstart+length(colnames.params))
(colstart+length(colnames.params)-1)
(colstart+2*length(colnames.params)-1)
View(datall)
(colstart+2*length(colnames.params))
(colstart+3*length(colnames.params)-1)
whichcols
unname(apply(mydat2[,whichcols],2,FUN=min,na.rm=TRUE))
#3.Annual AVG + MIN + MAX of SRB
#--> annual AVG calculated based monthly AVG
#-->annual MIN/MAX calculated based on pooled data
Nobs.sum_stations<-paste("Nobs.sum",stations,sep="_")
colnames.df_annual<-c(paste(colnames.params,"annual_AVG",sep="_"),
paste(colnames.params,"annual_MAX",sep="_"),
paste(colnames.params,"annual_MIN",sep="_"))
data.param_annual<-as.data.frame(matrix(NA,ncol=(1+length(Nobs.sum_stations)+length(colnames.df_annual)),nrow=length(timeseries),
dimnames=list(NULL,c("year",Nobs.sum_stations,colnames.df_annual))))
colstart<-length(c("year",Nobs.sum_stations))+1
nrow.df<-0
for(i in 1:length(timeseries)){
nrow.df<-nrow.df+1
data.param_annual[nrow.df,"year"]<-timeseries[i]
mydat<-data.param_month[which(data.param_month[,"year"]==timeseries[i]),]
data.param_annual[nrow.df,colstart:(colstart+length(colnames.params)-1)]<-
unname(apply(mydat[,whichcols.monthly_AVG],2,FUN=mean,na.rm=TRUE))#annual AVG
for(u in 1:length(stations))data.param_annual[nrow.df,Nobs.sum_stations[u]]<-sum(mydat[,Nobs_stations[u]])
mydat2<-dat[which(dat[,"year"]==timeseries[i]),]
data.param_annual[nrow.df,(colstart+length(colnames.params)):(colstart+2*length(colnames.params)-1)]<-
unname(apply(mydat2[,whichcols],2,FUN=max,na.rm=TRUE))#annual MAX
data.param_season[nrow.df,(colstart+2*length(colnames.params)):(colstart+3*length(colnames.params)-1)]<-
unname(apply(mydat2[,whichcols],2,FUN=min,na.rm=TRUE))}#annual MIN
View(mydat2)
